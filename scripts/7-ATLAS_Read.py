# PURPOSE: Read in ATLAS ITK sim data:
# ---------------
#
# INPUT: https://cernbox.cern.ch/index.php/s/CsTC1CQH20IwGOd
# Truth and hit data for ATLAS ITK sim event.
# ---------------
#
# OUTPUT: TrackML format data
# Hit file must have the form:
# hit_id,x,y,z,volume_id,layer_id,module_id
# Truth File must have the form:
# hit_id,particle_id,tx,ty,tz,tpx,tpy,tpz,weight, weight being 0.
# ----------------
#
# DATA SIMPLIFICATIONS:
# Some hits have more than one truth particle, discarding similarly to TrackML simplifications in hepqpr.
# Removing hits generated by end caps.
# FIXME: Output has Ptx Pty Ptz all as Pt. can determine absolute values from eta
# Secondary vertices removed for the time being.
# ----------------

import numpy as np
import math
import pandas as pd

pd.set_option("display.precision", 18)
# Define Input/Output Dataframes
# Filtered == Output
#hits_dataframe = pd.read_csv('event89712-hits.csv')
#truth_dataframe = pd.read_csv('/Users/parkerreid/Downloads/event89712-truth.csv')
truth_dataframe = pd.read_csv('/Users/parkerreid/Downloads/event69927-truth.csv')
hits_dataframe = pd.read_csv('/Users/parkerreid/PycharmProjects/ATLASread/event69927-hits.csv')

filtered_truth_dataframe = pd.DataFrame({"hit_id":[], "particle_id":[], "tx":[], "ty":[], "tz":[], "tpx":[], "tpy":[]\
                                         ,"tpz":[], "weight":[]})
filtered_hits_dataframe = pd.DataFrame({"hit_id":[], "x":[], "y":[], "z":[], "truth":[], "volume_id":[],\
                                        "layer_id":[], "module_id":[]})



print(list(hits_dataframe.columns.values))

# Layer information, generally hits like +- 10mm on these radial values
# SCT: 39, 99, 160, 228, 291
# TRT: 405, 562 ,762, 1000

layers = [(0,50),(50,120),(120,190),(190,250),(250,350),(350,450),(450,650),(650,850),(850,1100)]

# For each row of data:
# 1. Filter events that do not have a corresponding truth particle
# 2. Determine Radius
count = 0
for index, row in hits_dataframe.iterrows():

    if math.isnan(row["truth1"]) == False and math.isnan(row["truth2"]):
        if np.int(row["truth1"]) <= 5000.0:
            print(type(np.int(row["truth1"])))
            print(np.int(row["truth1"]))

            radius = np.sqrt(row['x']**2 + row['y']**2)
            layer = layers.index(list(filter(lambda sl: radius > sl[0] and radius <= sl[1], layers))[0])

            if (np.abs(np.float(row["z"])) < 261 and radius < 120) or (np.abs(np.float(row["z"])) < 1145 and radius > 120):
                #when writing to file, layer_id and module_id aren't used in hepqpr
                filtered_hits_dataframe.loc[count] = ([row['ID'], row['x'], row['y'], row['z'], row['truth1'],8, layer, 2])


            count = count + 1
print(len(filtered_hits_dataframe.index))
count = 0
listofcorrect = []
listoffalse = []
print(type(listofcorrect))
    #for data with the same truth barcode, add new entry to filtered_truth_dataframe
for hit_index, hit_row in filtered_hits_dataframe.iterrows():
    for truth_index, truth_row in truth_dataframe.iterrows():
        if hit_row["truth"] == truth_row["truth_barcode"]:
            filtered_truth_dataframe.loc[count] = (hit_row['hit_id'], truth_row['truth_barcode'], truth_row['x_prod'],\
                                                   truth_row['y_prod'], truth_row['z_prod'], truth_row['pt'], \
                                                   truth_row['pt'], truth_row['pt'], 0)

            # Truth File must have the form:
            # hit_id,particle_id,tx,ty,tz,tpx,tpy,tpz,weight, weight being 0.
            count = count+1
            print(count)
            listofcorrect.append(hit_row["truth"])

        listoffalse.append(hit_row["truth"])
listofmissing =set(listoffalse).difference(set(listofcorrect))
print(listofmissing)
print(filtered_truth_dataframe.head())
# Drop the truth particle associated with the hit
filtered_hits_dataframe.drop(['truth'], axis=1)

    #Hit file must have the form:
    #hit_id,x,y,z,volume_id,layer_id,module_id

    # Truth File must have the form:
    # hit_id,particle_id,tx,ty,tz,tpx,tpy,tpz,weight, weight being 0

print(filtered_hits_dataframe)

print(len(filtered_hits_dataframe.index))
filtered_hits_dataframe.to_csv("ATLAS_TrackML_Hits.csv", index=False, float_format='%17.2f')
filtered_truth_dataframe.to_csv("ATLAS_TrackML_Truth.csv", index=False, float_format='%17.2f')
